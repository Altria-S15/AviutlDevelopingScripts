--track0:type,0,20,0,1
--track1:付属layer,0,100,0,1
--check0:INFO,0
--dialog:添え字,local st="T";指定配列,local n=1;付属:添え字,local lst="";付属DT不可/chk,local isnotuseDT=0;

local tl=obj.track1
local Appea={}
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------- ここより先定義 ---------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
local error_message = function(tx)
	obj.setfont("メイリオ",50)
	obj.load("ERROR\n"..tx)
end

local message = function(tx)
	obj.setfont("メイリオ",50)
	obj.load(tx)
end

local gv = function(l,type)
	return obj.getvalue("layer"..l.."."..type)
end
-- dofile('C:\\Users\\Aodaruma\\Desktop\\aviutl\\plugins\\script\\my scripts\\CHAP-aodaruma.lua')

local addAffectorDelayT = function(n,st,l,lst) -- n==指定配列、st==添え字
--[[
	Appeaに必要なAffectを用意する関数。
	DelayTrackが必要。
]]--
	local af={}
	local d=DT[(type(st)=="string" and st) or tostring(st)]
	local i,j,d2

	for i=1,#d do
		af[i] = {t=d[i][n]}
		if(tl==0) then
			af[i]["x"] = d[i].x
			af[i]["y"] = d[i].y
			af[i]["z"] = d[i].z
			af[i]["rx"] = d[i].rx
			af[i]["ry"] = d[i].ry
			af[i]["rz"] = d[i].rz
			af[i]["zoom"] = d[i].zoom
			af[i]["alpha"] = d[i].alpha
			af[i]["aspect"] = d[i].aspect
		else
			if(lst and DT[lst]) and (isnotuseDT==0) then
				d2 = DT[lst]
				af[i]["x"] = d2[i].x
				af[i]["y"] = d2[i].y
				af[i]["z"] = d2[i].z
				af[i]["rx"] = d2[i].rx
				af[i]["ry"] = d2[i].ry
				af[i]["rz"] = d2[i].rz
				af[i]["zoom"] = d2[i].zoom
				af[i]["alpha"] = d2[i].alpha
				af[i]["aspect"] = d2[i].aspect
			else
				af[i]["x"] = gv(l,"x")
				af[i]["y"] = gv(l,"y")
				af[i]["z"] = gv(l,"z")
				af[i]["rx"] = gv(l,"rx")
				af[i]["ry"] = gv(l,"ry")
				af[i]["rz"] = gv(l,"rz")
				af[i]["zoom"] = gv(l,"zoom")
				af[i]["alpha"] = gv(l,"alpha")
				af[i]["aspect"] = gv(l,"aspect")
			end
		end
	end

	if(l==0) then
		af["x"] = d[1].x
		af["y"] = d[1].y
		af["z"] = d[1].z
		af["rx"] = d[1].rx
		af["ry"] = d[1].ry
		af["rz"] = d[1].rz
		af["zoom"] = d[1].zoom
		af["alpha"] = d[1].alpha
		af["aspect"] = d[1].aspect
	else
		af["x"] = gv(l,"x")
		af["y"] = gv(l,"y")
		af["z"] = gv(l,"z")
		af["rx"] = gv(l,"rx")
		af["ry"] = gv(l,"ry")
		af["rz"] = gv(l,"rz")
		af["zoom"] = gv(l,"zoom")
		af["alpha"] = gv(l,"alpha")
		af["aspect"] = gv(l,"aspect")
	end
	af["n"] = #d
	return af
end



-----------------------------------------------------------------------
Appea[1] = function(st,k,tl,lst) -- st==添え字

--[[
	DelayTrackが必要。
	指定配列は「1」、numは4です。
]]--

	local af = addAffectorDelayT(k,st,tl,lst)
	local n,uf = af.n,{}
	local i
	local w,h=obj.w,obj.h
	local x,y
	local dif=0.2
	local ang=math.deg(math.atan(h/w))*-1

	if(n==4) then
		for i=1,n do
			af[i]["t"] = af[i].t/100
			table.insert(uf,(1-af[i].t))
		end

		obj.copybuffer("cache:back","obj")

		-- obj.setoption("dst","tmp",obj.w,obj.h)
		-- 	obj.load("framebuffer")
		-- obj.draw(-1*obj.x,-1*obj.y)
		-- obj.setoption("dst","tmp")
		-- 	obj.copybuffer("obj","cache:back-"..obj.layer)
		-- 	obj.setoption("blend","alpha_sub")
		-- obj.draw()
		-- obj.load("tempbuffer")
		-- obj.effect("反転","透明度反転",1)
		-- obj.effect("ぼかし","サイズ固定",30)
		-- -- obj.effect("透明度","透明度",0)
		-- obj.effect("斜めクリッピング","角度",90,"幅",obj.h*af[1].t+1)
		-- obj.effect("単色化","輝度を保持する",0,"color",0x000000,"強さ",40)
		-- -- obj.draw()
		-- obj.copybuffer("cache:backblur","obj")

		obj.setoption("dst","tmp",obj.w,obj.h)
		obj.copybuffer("obj","cache:back")
		obj.effect("単色化","輝度を保持する",0,"color",0x00d0ff,"強さ",40)
		obj.effect("斜めクリッピング","角度",0)
		obj.effect("斜めクリッピング","角度",90)
		obj.effect("斜めクリッピング","角度",ang*uf[4]*uf[1]-180, "中心X",w/2,"中心Y",h/2*-1)
		obj.effect("斜めクリッピング","角度",ang*uf[4]*uf[1]-90*af[4].t*af[1].t,"中心X",w/2,"中心Y",h/2*-1)
		obj.copybuffer("cache:clip","obj")
		for i=1,4 do
			x,y=obj.ox,obj.oy
			obj.copybuffer("obj","cache:clip")
			if(i>2)then obj.effect("反転","上下反転",1) y=y-dif else y=y+dif end
			if(i%2==0) then obj.effect("反転","左右反転",1) x=x+dif else x=x-dif end
			obj.setoption("dst","tmp")
			obj.draw(x,y,0,1,0.2)
		end

		obj.setoption("dst","tmp")
			obj.setoption("blend",0)
			obj.copybuffer("obj","cache:back")
			obj.effect("透明度","透明度",80)
			obj.effect("単色化","輝度を保持する",0,"color",0x000000,"強さ",50)
			obj.effect("斜めクリッピング","角度",90*uf[2]*uf[1],"幅",h*af[2].t*af[1].t+1)
			obj.effect("斜めクリッピング","角度",90,"幅",w*af[1].t+1)
		obj.draw(0,0,0,1,0.3)

		obj.setoption("dst","tmp")
			obj.copybuffer("obj","cache:back")
			obj.effect("透明度","透明度",90)
			obj.effect("単色化","輝度を保持する",0,"color",0x000000,"強さ",80)
			obj.effect("斜めクリッピング","角度",90*uf[3]*uf[1],"幅",h*af[3].t*af[1].t+1)
			obj.effect("斜めクリッピング","角度",90,"幅",w*af[1].t+1)
		obj.draw(0,0,0,1,0.4)

		obj.setoption("dst","tmp")
			obj.copybuffer("obj","cache:back")
			obj.effect("エッジ抽出")
			obj.effect("リサイズ","X",100*af[1].t)
		obj.draw()

		obj.setoption("dst","tmp")
			obj.copybuffer("obj","cache:backblur")
		obj.draw()

		obj.load("tempbuffer")
		obj.draw()
	end
end


------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------- 本体 -------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------

local type,info = obj.track0,obj.check0


if(not info) and (type~=0) then
	if(Appea[type]) then
		Appea[type](st,n,obj.track1,lst)
	else
		error_message()
	end
elseif (not info) and (type==0) then
	message(
		"現在"..#Appea.."のtype数が使用できます。"
		)
else 
	message(
		"DT状況:\n"
		.."添え字:"..st.."; 存在:"..((DT[st] and "yes") or "no")..";\n"
		.."付属添え字:"..st.."; 存在:"..((DT[lst] and "yes") or "no")..";\n\n"
		.."type:"..type..";"..(DT[st] and (" AF:"..DT[st][1][n].."%;")) or ""
		)
end